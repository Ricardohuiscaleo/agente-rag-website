---
import Layout from '../../layouts/Layout.astro';

// Aseguramos que esta página se renderice en el servidor y no sea prerenderizada
export const prerender = false;

import { getSupabaseServerClient } from '../../lib/supabase';

// Verificar autenticación en el servidor
console.log('Dashboard: Iniciando verificación de autenticación');

// Detectar si venimos del callback
const fromCallback =
  Astro.url.searchParams.get('auth') === 'success' ||
  Astro.url.searchParams.get('auth') === 'server_redirect' ||
  Astro.url.searchParams.get('auth') === 'callback_redirect';

// Obtener la sesión actual desde el servidor usando el cliente de servidor
const supabase = getSupabaseServerClient(Astro.cookies);

// Usar getUser() en lugar de getSession() para una validación más segura
const {
  data: { user },
  error: userError,
} = await supabase.auth.getUser();

// Log de errores de autenticación (ayuda a depurar problemas)
if (userError && userError.message !== 'Auth session missing!') {
  console.error('Dashboard: Error al obtener usuario:', userError);
}

// Si venimos del callback pero no hay usuario autenticado, probablemente hay un problema con las cookies
if (fromCallback && !user) {
  console.log(
    'Dashboard: Venimos del callback pero no hay usuario. Posible problema con cookies o almacenamiento.'
  );

  // Intentar usar la cookie especial que podría haberse establecido en el callback
  const callbackTimestamp = Astro.url.searchParams.get('t');
  if (callbackTimestamp) {
    console.log(`Dashboard: Timestamp de redirección del callback: ${callbackTimestamp}`);
    // No redirigimos inmediatamente, permitimos que el cliente intente resolver la sesión
  }
} else if (user) {
  console.log(`Dashboard: Usuario autenticado: ${user.email}`);
} else {
  console.log('Dashboard: Acceso directo, verificando autenticación...');

  // Si no hay usuario autenticado, redirigir a la página de inicio
  if (!user) {
    console.log('Dashboard: No hay usuario autenticado, redirigiendo a login');
    return Astro.redirect('/?authError=unauthenticated');
  }
}

// Ya no necesitamos extraer el usuario de session.user porque getUser() nos da directamente el usuario
---

<Layout title="RAG Agent Dashboard">
  <div class="dashboard-wrapper bg-gradient-to-b from-violet-900 to-indigo-900 min-h-screen">
    <div class="container mx-auto px-4 py-8">
      <header class="flex justify-between items-center mb-8">
        <div class="flex items-center">
          <img
            src="/compressed/logo-oscuro-optimizado.png"
            alt="RAG Agent Logo"
            class="h-12 mr-4"
          />
          <h1 class="text-3xl font-bold text-white">RAG Agent Dashboard</h1>
        </div>

        <div class="flex items-center">
          {
            user && (
              <span class="text-violet-200 mr-4">
                <span class="opacity-75">Usuario: </span>
                {user.email}
              </span>
            )
          }

          <button
            id="logout-btn"
            class="bg-violet-800 hover:bg-violet-700 text-white px-4 py-2 rounded-lg transition-colors"
          >
            Cerrar sesión
          </button>
        </div>
      </header>

      <div id="dashboard-content">
        <!-- Aquí irá el contenido del dashboard -->
        <div class="bg-black/30 backdrop-blur-md rounded-xl border border-violet-500/20 p-8 mb-8">
          <h2 class="text-2xl font-bold text-white mb-4">Bienvenido al Dashboard</h2>
          <p class="text-violet-200">
            Este es tu dashboard personalizado donde podrás acceder a todas las funcionalidades de
            RAG Agent.
          </p>
        </div>

        <!-- Añadir aquí más secciones del dashboard según necesidades -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          <!-- Tarjeta de ejemplo -->
          <div
            class="bg-black/20 backdrop-blur-sm rounded-xl border border-violet-500/10 p-6 hover:border-violet-500/30 transition-all"
          >
            <h3 class="text-xl font-semibold text-white mb-3">Mis Consultas</h3>
            <p class="text-violet-200 mb-4">Accede a tu historial de consultas y resultados.</p>
            <a
              href="#"
              class="text-violet-300 hover:text-violet-100 transition-colors inline-flex items-center"
            >
              Ver más
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 ml-1"
                viewBox="0 0 20 20"
                fill="currentColor"
              >
                <path
                  fill-rule="evenodd"
                  d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z"
                  clip-rule="evenodd"></path>
              </svg>
            </a>
          </div>

          <!-- Más tarjetas irían aquí -->
        </div>
      </div>

      <!-- Mensaje de sesión no encontrada (oculto por defecto) -->
      <div
        id="no-session-message"
        class="fixed inset-0 bg-black/80 backdrop-blur-sm hidden items-center justify-center z-50"
      >
        <div class="bg-violet-900 rounded-xl border border-violet-500/30 p-8 max-w-md w-full">
          <h2 class="text-2xl font-bold text-white mb-4">Sesión no detectada</h2>
          <p class="text-violet-200 mb-6">
            No se ha detectado una sesión activa. Por favor inicia sesión nuevamente.
          </p>
          <div class="flex flex-col sm:flex-row gap-3">
            <button
              id="retry-session-btn"
              class="bg-violet-600 hover:bg-violet-500 text-white px-4 py-2 rounded-lg transition-colors"
            >
              Reintentar
            </button>
            <a
              href="/"
              class="bg-transparent border border-violet-400 hover:border-violet-200 text-white px-4 py-2 rounded-lg text-center transition-colors"
            >
              Iniciar sesión
            </a>
          </div>

          <!-- Debug info section -->
          <div class="mt-8 pt-4 border-t border-violet-700/50">
            <details class="text-xs text-violet-300">
              <summary class="cursor-pointer hover:text-violet-100 transition-colors">
                Información de depuración
              </summary>
              <div class="mt-3 space-y-2 text-left">
                <p>URL actual: <span id="current-url"></span></p>
                <p>Desde callback: <span id="from-callback"></span></p>
                <p>User Agent: <span id="user-agent"></span></p>
                <p>Cookies disponibles: <span id="cookies-available"></span></p>
                <p>localStorage disponible: <span id="localstorage-available"></span></p>
              </div>
            </details>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { supabaseBrowserClient } from '../../lib/supabase';

  // Función para verificar disponibilidad de almacenamiento
  function checkStorageAvailability() {
    const testKey = 'test_storage_available';
    try {
      localStorage.setItem(testKey, 'test');
      localStorage.removeItem(testKey);
      return true;
    } catch (e) {
      return false;
    }
  }

  // Función para mostrar el diálogo de sesión no detectada
  function showNoSessionError(debugInfo) {
    const dialog = document.getElementById('no-session-message');
    if (dialog) {
      dialog.classList.remove('hidden');
      dialog.classList.add('flex'); // Add flex when showing

      // Rellenar información de depuración
      document.getElementById('current-url')?.setAttribute('textContent', window.location.href);
      document
        .getElementById('from-callback')
        ?.setAttribute('textContent', String(debugInfo?.fromCallback || 'No'));
      document.getElementById('user-agent')?.setAttribute('textContent', navigator.userAgent);
      document
        .getElementById('cookies-available')
        ?.setAttribute('textContent', String(navigator.cookieEnabled));
      document
        .getElementById('localstorage-available')
        ?.setAttribute('textContent', String(checkStorageAvailability()));
    }

    // Ocultar el contenido del dashboard
    const dashboardContent = document.getElementById('dashboard-content');
    if (dashboardContent) {
      dashboardContent.style.opacity = '0.2';
    }
  }

  // Función para verificar la sesión
  async function checkSession() {
    try {
      console.log('Verificando sesión en el cliente...');

      // Determinar si venimos del callback por el parámetro en la URL
      const urlParams = new URLSearchParams(window.location.search);
      const fromCallback =
        urlParams.get('auth') === 'success' ||
        urlParams.get('auth') === 'server_redirect' ||
        urlParams.get('auth') === 'forced' ||
        urlParams.get('auth') === 'callback_redirect';

      // Verificar si tenemos un timestamp del callback
      const callbackTimestamp = urlParams.get('t');
      if (callbackTimestamp) {
        console.log(`Timestamp de redirección del callback: ${callbackTimestamp}`);
      }

      // Verificar almacenamiento
      const storageAvailable = checkStorageAvailability();
      if (!storageAvailable) {
        console.warn('localStorage no está disponible, esto afectará la autenticación');
      }

      // Usar getUser() en lugar de getSession() para mayor seguridad
      const {
        data: { user },
        error,
      } = await supabaseBrowserClient.auth.getUser();

      if (error) {
        console.error('Error al verificar usuario:', error);
        showNoSessionError({ fromCallback, error: error.message });
        return false;
      }

      if (!user) {
        console.log('No hay usuario autenticado en el cliente');

        // Si estamos llegando del callback pero no hay usuario, intentamos recuperar la sesión
        if (fromCallback) {
          console.log(
            'Venimos del callback pero no hay usuario, intentando recuperar la sesión...'
          );

          // Comprobar si hay algo en localStorage relacionado con la autenticación
          const hasAuthData = Object.keys(localStorage).some((key) =>
            key.includes('supabase.auth')
          );
          console.log('Datos de autenticación en localStorage:', hasAuthData);

          try {
            // Intentamos un refresh como última opción
            const { error: refreshError } = await supabaseBrowserClient.auth.refreshSession();
            if (refreshError) {
              console.error('Error al refrescar sesión:', refreshError);
            } else {
              // Verificar de nuevo con getUser después del refresh
              const { data: refreshData } = await supabaseBrowserClient.auth.getUser();
              if (refreshData?.user) {
                console.log('Sesión recuperada después del refresh');
                return true;
              }
            }
          } catch (e) {
            console.error('Error al intentar recuperar la sesión:', e);
          }

          console.log('No se pudo recuperar la sesión, mostrando error');

          // Si hay algún token en localStorage pero no podemos recuperar la sesión,
          // probablemente sea un problema de dominio o de cookies
          showNoSessionError({
            fromCallback,
            hasAuthData,
            storageAvailable,
            cookiesEnabled: navigator.cookieEnabled,
          });
        } else {
          // Acceso directo sin sesión, redireccionamos
          window.location.href = '/?auth=required';
        }
        return false;
      }

      console.log('Usuario autenticado verificado en el cliente:', user.email);
      return true;
    } catch (e) {
      console.error('Error general al verificar autenticación:', e);
      showNoSessionError({ error: e.message });
      return false;
    }
  }

  // Manejar cierre de sesión
  async function handleLogout() {
    try {
      await supabaseBrowserClient.auth.signOut({ scope: 'global' });
      // Limpiar cualquier dato relacionado con la autenticación en localStorage
      Object.keys(localStorage).forEach((key) => {
        if (key.includes('supabase') || key.includes('auth')) {
          localStorage.removeItem(key);
        }
      });
      window.location.href = '/';
    } catch (error) {
      console.error('Error al cerrar sesión:', error);
    }
  }

  // Configurar manejadores de eventos
  document.addEventListener('DOMContentLoaded', async () => {
    console.log('Página del dashboard cargada, verificando sesión...');

    // Verificar sesión cuando carga la página
    await checkSession();

    // Configurar botón de cierre de sesión
    document.getElementById('logout-btn')?.addEventListener('click', handleLogout);

    // Configurar botón de reintentar sesión
    document.getElementById('retry-session-btn')?.addEventListener('click', async () => {
      console.log('Intentando recuperar sesión...');
      const result = await checkSession();
      if (result) {
        // Si la sesión se recuperó, ocultar el diálogo y refrescar la página
        const noSessionMessage = document.getElementById('no-session-message');
        if (noSessionMessage) {
          noSessionMessage.classList.add('hidden');
          noSessionMessage.classList.remove('flex'); // Remove flex when hiding
        }

        const dashboardContent = document.getElementById('dashboard-content');
        if (dashboardContent) {
          dashboardContent.style.opacity = '1';
        }

        // Refrescar la página para asegurar que todo esté sincronizado
        window.location.reload();
      } else {
        // Redirigir al inicio como último recurso
        setTimeout(() => (window.location.href = '/?auth=failed'), 1000);
      }
    });
  });
</script>
