---
import Layout from '../../layouts/Layout.astro';

// src/pages/auth/callback.astro
// Implementación mínima para diagnosticar el flujo de autenticación
export const prerender = false;

// Variables para debugging en el servidor
const currentUrl = Astro.request.url;
const referrer = Astro.request.headers.get('referer');
const urlParams = Astro.url.searchParams;
const hasCode = urlParams.has('code');
const theCode = urlParams.get('code');
const hasState = urlParams.has('state');

// Log en el servidor para diagnóstico
console.log(`Callback: Recibida URL ${Astro.url.toString()}`);
console.log(`Callback: Código de autorización: ${hasCode ? theCode : 'Ausente'}`);
console.log(`Callback: Estado: ${hasState ? urlParams.get('state') : 'Ausente'}`);
---

<html lang="es">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Autenticando...</title>
    <style>
      body {
        font-family:
          system-ui,
          -apple-system,
          BlinkMacSystemFont,
          'Segoe UI',
          Roboto,
          sans-serif;
        background: linear-gradient(to bottom, #4c1d95, #1e1b4b);
        color: white;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100vh;
        margin: 0;
      }
      .auth-container {
        background-color: rgba(0, 0, 0, 0.3);
        backdrop-filter: blur(10px);
        padding: 2rem;
        border-radius: 1rem;
        border: 1px solid rgba(139, 92, 246, 0.2);
        max-width: 500px;
        text-align: center;
      }
      .logo {
        height: 64px;
        margin-bottom: 1.5rem;
      }
      .spinner {
        width: 48px;
        height: 48px;
        border: 4px solid rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        border-top-color: #8b5cf6;
        margin: 1.5rem auto;
        animation: spin 1s ease-in-out infinite;
      }
      .debug-panel {
        margin-top: 2rem;
        padding: 1rem;
        background-color: rgba(0, 0, 0, 0.5);
        border: 1px solid rgba(245, 158, 11, 0.3);
        border-radius: 0.5rem;
        text-align: left;
        font-size: 0.75rem;
        width: 100%;
      }
      .debug-panel h3 {
        color: #f59e0b;
        margin-top: 0;
      }
      .debug-info {
        color: #fcd34d;
        overflow-y: auto;
        max-height: 200px;
        white-space: pre-wrap;
        margin-bottom: 1rem;
      }
      .button {
        display: inline-block;
        padding: 0.5rem 1rem;
        background-color: #4338ca;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
        margin: 0.25rem;
        font-size: 0.875rem;
        transition: background-color 0.2s;
      }
      .button:hover {
        background-color: #4f46e5;
      }
      .button.danger {
        background-color: #b91c1c;
      }
      .button.danger:hover {
        background-color: #dc2626;
      }
      @keyframes spin {
        0% {
          transform: rotate(0deg);
        }
        100% {
          transform: rotate(360deg);
        }
      }
      .error-message {
        background-color: rgba(220, 38, 38, 0.2);
        border: 1px solid rgba(220, 38, 38, 0.3);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-top: 1rem;
        color: #fecaca;
        display: none;
      }
    </style>
  </head>
  <body>
    <div class="auth-container">
      <img src="/compressed/logo-oscuro-optimizado.png" alt="Logo AR" class="logo" />
      <h1>Autenticando...</h1>
      <div class="spinner" id="loading-spinner"></div>
      <p>Estamos procesando tu inicio de sesión.</p>
      <p>Serás redireccionado automáticamente en unos segundos.</p>

      <div class="error-message" id="auth-error">
        <p id="error-message">Ha ocurrido un error durante la autenticación.</p>
        <a href="/#iniciar" class="button">Volver a intentar</a>
      </div>

      <!-- Panel de depuración (visible solo en entorno de desarrollo) -->
      <div class="debug-panel" id="debug-panel" style="display: none;">
        <h3>Información de depuración</h3>
        <div class="debug-info">
          <p><strong>URL actual:</strong> {currentUrl}</p>
          <p><strong>Referrer:</strong> {referrer || 'N/A'}</p>
          <p><strong>Código de autorización:</strong> {hasCode ? 'Presente' : 'Ausente'}</p>
          <p><strong>Estado:</strong> {hasState ? 'Presente' : 'Ausente'}</p>
        </div>
        <pre id="debug-info" class="debug-info"></pre>
        <div style="text-align: center;">
          <button id="force-dashboard" class="button">Forzar dashboard</button>
          <button id="check-storage" class="button">Verificar almacenamiento</button>
          <button id="clear-storage" class="button danger">Limpiar almacenamiento</button>
        </div>
      </div>
    </div>

    <script>
      import { supabaseBrowserClient } from '../../lib/supabase';
      // Removemos la importación de tipos

      function showError(message) {
        const errorDiv = document.getElementById('auth-error');
        const errorMessageEl = document.getElementById('error-message');
        const spinner = document.getElementById('loading-spinner');

        if (errorDiv && errorMessageEl) {
          errorMessageEl.textContent = message;
          errorDiv.style.display = 'block';
          if (spinner) spinner.style.display = 'none';
        }
      }

      function logDebug(message: string, data?: any) {
        // data es completamente opcional con tipo any
        console.log(`[AUTH DEBUG] ${message}`, data !== undefined ? data : '(no data)');

        const debugInfoEl = document.getElementById('debug-info');
        if (debugInfoEl) {
          const timestamp = new Date().toLocaleTimeString();
          let formattedData = '';
          if (data !== null && data !== undefined) {
            formattedData = typeof data === 'string' ? data : JSON.stringify(data, null, 2);
          }
          debugInfoEl.textContent += `[${timestamp}] ${message}\n${formattedData}\n\n`;
        }
      }

      // Mostrar panel de depuración en localhost
      const debugPanel = document.getElementById('debug-panel');
      if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
        if (debugPanel) {
          // Verificar si el elemento existe antes de acceder a 'style'
          debugPanel.style.display = 'block';
        }
      }

      document.addEventListener('DOMContentLoaded', () => {
        logDebug('Callback page script loaded', undefined);
        logDebug('Current URL:', window.location.href);

        if (window.location.hash.includes('error=')) {
          const errorMatch = window.location.hash.match(/error=([^&]+)/);
          if (errorMatch && errorMatch[1]) {
            const errorMessageText = decodeURIComponent(errorMatch[1].replace(/\+/g, ' '));
            logDebug('Error detected in URL hash:', errorMessageText);
            showError(`Error de autenticación: ${errorMessageText}`);
          }
        }

        const {
          data: { subscription },
        } = supabaseBrowserClient.auth.onAuthStateChange(async (event, session) => {
          logDebug('onAuthStateChange event:', event);
          logDebug('session:', session);

          if (event === 'SIGNED_IN' && session) {
            logDebug('Signed in successfully!');
            try {
              localStorage.setItem(
                'supabase.debug.lastSession',
                JSON.stringify({
                  user: session.user ? session.user.email : null,
                  expires: session.expires_at
                    ? new Date(session.expires_at * 1000).toLocaleString()
                    : 'N/A',
                  event: event,
                })
              );

              // Forzar a que las cookies se sincronicen correctamente
              document.cookie = `sb-auth-token-forced=true; path=/; max-age=${60 * 60 * 24}; SameSite=Lax`;
            } catch (e) {
              console.error('Error saving debug session to localStorage', e);
            }

            // Añadir un retraso más significativo para dar tiempo a que las cookies se establezcan
            // y añadir un parámetro que indica que venimos del callback para un manejo especial
            setTimeout(() => {
              window.location.assign('/dashboard?auth=callback_redirect&t=' + new Date().getTime());
            }, 2000);
          } else if (event === 'TOKEN_REFRESHED' && session) {
            logDebug('Token refreshed successfully. Session active.');
            if (window.location.pathname === '/auth/callback') {
              setTimeout(() => {
                window.location.href = '/dashboard';
              }, 1000);
            }
          } else if (session === null && event === 'SIGNED_OUT') {
            logDebug(`${event} event detected`, undefined);
            showError('La sesión ha finalizado. Por favor, inténtalo de nuevo.');
          } else if (event === 'INITIAL_SESSION' && session === null) {
            logDebug('INITIAL_SESSION event with no session', undefined);

            if (window.location.pathname === '/auth/callback') {
              setTimeout(async () => {
                if (window.location.pathname === '/auth/callback') {
                  const { data: currentSessionDataCheck } =
                    await supabaseBrowserClient.auth.getSession();
                  if (!currentSessionDataCheck.session) {
                    showError(
                      'No se pudo iniciar sesión. Comprueba tus credenciales e inténtalo de nuevo.'
                    );
                  }
                }
              }, 5000);
            }
          }
        });

        supabaseBrowserClient.auth
          .getSession()
          .then(async ({ data: currentSessionData, error: getSessionError }) => {
            logDebug('Initial getSession() in callback:', currentSessionData);

            if (getSessionError) {
              logDebug('getSession error:', getSessionError);
              showError(`Error al verificar sesión: ${getSessionError.message}`);
              return;
            }

            if (currentSessionData.session) {
              logDebug('Session already exists on callback load:', {
                user: currentSessionData.session.user
                  ? currentSessionData.session.user.email
                  : null,
                expires: currentSessionData.session.expires_at
                  ? new Date(currentSessionData.session.expires_at * 1000).toLocaleString()
                  : 'N/A',
              });
              setTimeout(() => {
                if (window.location.pathname === '/auth/callback') {
                  window.location.href = '/dashboard';
                }
              }, 1000);
            } else {
              logDebug('No session found on initial load');
              const urlParams = new URLSearchParams(window.location.search);
              const hashParams = new URLSearchParams(window.location.hash.substring(1));
              const hasCode = urlParams.has('code');
              const hasToken = hashParams.has('access_token');

              if (hasCode) {
                logDebug(
                  'URL contains code, Supabase SDK should be processing PKCE flow.',
                  undefined
                );
              } else if (hasToken) {
                logDebug(
                  'URL contains access_token, Supabase SDK should be processing Implicit flow/session.',
                  undefined
                );
              } else {
                logDebug(
                  'No code or token in URL - auth flow may not have started properly or failed before redirecting back.',
                  undefined
                );
                setTimeout(async () => {
                  const { data: finalCheckSessionData } =
                    await supabaseBrowserClient.auth.getSession();
                  if (
                    window.location.pathname === '/auth/callback' &&
                    !finalCheckSessionData.session
                  ) {
                    showError(
                      'No se detectó un código de autorización o token. La autenticación puede haber fallado.'
                    );
                  }
                }, 3000);
              }
            }
          });

        // Configurar botones de depuración
        const forceDashboardButton = document.getElementById('force-dashboard');
        if (forceDashboardButton) {
          forceDashboardButton.addEventListener('click', () => {
            window.location.href = '/dashboard';
          });
        }

        const checkStorageButton = document.getElementById('check-storage');
        if (checkStorageButton) {
          checkStorageButton.addEventListener('click', async () => {
            try {
              const localStorageItems = {};
              for (let i = 0; i < localStorage.length; i++) {
                const key = localStorage.key(i);
                if (key) localStorageItems[key] = localStorage.getItem(key);
              }
              const sessionStorageItems = {};
              for (let i = 0; i < sessionStorage.length; i++) {
                const key = sessionStorage.key(i);
                if (key) sessionStorageItems[key] = sessionStorage.getItem(key);
              }
              const { data: sessionCheckData } = await supabaseBrowserClient.auth.getSession();
              const sessionInfo =
                sessionCheckData && sessionCheckData.session
                  ? `Activa (${sessionCheckData.session.user ? sessionCheckData.session.user.email : 'Sin email'})`
                  : 'No hay sesión';

              const debugInfoStorageEl = document.getElementById('debug-info');
              if (debugInfoStorageEl) {
                debugInfoStorageEl.textContent = `
LOCAL STORAGE:
${JSON.stringify(localStorageItems, null, 2)}

SESSION STORAGE:
${JSON.stringify(sessionStorageItems, null, 2)}

SESIÓN SUPABASE:
${sessionInfo}
                `;
              }
            } catch (error) {
              console.error('Error verificando almacenamiento:', error);
              logDebug('Error verificando almacenamiento:', error);
            }
          });
        }

        const clearStorageButton = document.getElementById('clear-storage');
        if (clearStorageButton) {
          clearStorageButton.addEventListener('click', () => {
            localStorage.clear();
            sessionStorage.clear();
            alert('Almacenamiento limpiado. Recargando página...');
            window.location.reload();
          });
        }
      });
    </script>
  </body>
</html>
