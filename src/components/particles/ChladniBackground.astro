---
// El frontmatter de Astro (se ejecuta en el servidor, aquí no necesitamos nada por ahora)
---

<!-- 1. El HTML de tu componente -->
<div id="widgetContainer" class="widget-container"></div>

<!-- 2. El CSS -->
<style>
  /* Hacemos que el contenedor sea un fondo fijo que cubra toda la pantalla */
  .widget-container {
    position: fixed; /* Clave para que sea un fondo */
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: -1; /* Lo enviamos detrás de todo el contenido */
    background: transparent;
  }
</style>

<!-- 3. El JavaScript -->
<script is:inline>
  // Importamos Three.js que instalamos con npm
  import * as THREE from 'three';

  // El resto de tu código, casi sin cambios
  const container = document.getElementById('widgetContainer');
  // Evitamos errores si el contenedor no existe en alguna página
  if (container) {
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000
    );
    camera.position.z = 5;

    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
    renderer.setSize(container.clientWidth, container.clientHeight);
    renderer.setPixelRatio(window.devicePixelRatio);
    container.appendChild(renderer.domElement);

    window.addEventListener('resize', () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    });

    // ... (El resto de tu código JavaScript va aquí, sin cambios) ...
    const particleCount = 4500;
    const initRangeY = 3;
    const initAspect = container.clientWidth / container.clientHeight;
    const initRangeX = initRangeY * initAspect;

    const positions = new Float32Array(particleCount * 3);
    const velocities = new Float32Array(particleCount * 3);
    const opacities = new Float32Array(particleCount);

    for (let i = 0; i < particleCount; i++) {
      const idx = i * 3;
      positions[idx] = (Math.random() * 2 - 1) * initRangeX;
      positions[idx + 1] = (Math.random() * 2 - 1) * initRangeY;
      positions[idx + 2] = 0;
      velocities[idx] = velocities[idx + 1] = velocities[idx + 2] = 0;
      opacities[i] = Math.random();
    }

    const geometry = new THREE.BufferGeometry();
    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    geometry.setAttribute('aOpacity', new THREE.BufferAttribute(opacities, 1));

    const vertexShader = `
      attribute float aOpacity;
      varying float vOpacity;
      void main() {
        vOpacity = aOpacity;
        gl_PointSize = 3.0;
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `;

    const fragmentShader = `
      varying float vOpacity;
      void main() {
        vec2 cxy = 2.0 * gl_PointCoord - 1.0;
        float r = dot(cxy, cxy);
        if (r > 1.0) discard;
        float gray = mix(0.2, 0.9, vOpacity);
        gl_FragColor = vec4(vec3(gray), vOpacity);
      }
    `;

    const material = new THREE.ShaderMaterial({
      vertexShader,
      fragmentShader,
      transparent: true,
      depthWrite: false,
    });

    const particleSystem = new THREE.Points(geometry, material);
    scene.add(particleSystem);

    const lineMaterial = new THREE.LineBasicMaterial({
      color: 0xffffff,
      transparent: true,
      opacity: 0.2,
    });
    const maxConnections = 10000;
    const linePositions = new Float32Array(maxConnections * 6);
    const lineGeometry = new THREE.BufferGeometry();
    lineGeometry.setAttribute('position', new THREE.BufferAttribute(linePositions, 3));
    const lineMesh = new THREE.LineSegments(lineGeometry, lineMaterial);
    scene.add(lineMesh);

    const posAttr = geometry.attributes.position;
    const opacityAttr = geometry.attributes.aOpacity;

    let f1 = 2,
      f2 = 2,
      f3 = 1.5,
      f4 = 1.7;
    const patterns = [
      [2, 2, 1.5, 1.7],
      [3, 2, 2.1, 1.3],
      [4, 3, 2.5, 2.5],
      [5, 4, 3, 1.8],
      [2.5, 3.5, 1, 2],
      [4, 2, 2, 3],
      [3, 3, 1.7, 1.1],
    ];
    let patternIndex = 0;
    const dt = 0.016,
      frictionVal = 0.99,
      forceFactor = 1.8;

    setInterval(() => {
      patternIndex = (patternIndex + 1) % patterns.length;
      [f1, f2, f3, f4] = patterns[patternIndex];
    }, 9000);

    const wave = (x, y) =>
      Math.sin(f1 * x) * Math.cos(f2 * y) +
      Math.sin(f3 * x + f4 * y) +
      Math.sin(1.2 * (x * x + y * y));

    function gradWave(x, y) {
      const dx =
        f1 * Math.cos(f1 * x) * Math.cos(f2 * y) +
        f3 * Math.cos(f3 * x + f4 * y) +
        2.4 * x * Math.cos(1.2 * (x * x + y * y));
      const dy =
        -f2 * Math.sin(f1 * x) * Math.sin(f2 * y) +
        f4 * Math.cos(f3 * x + f4 * y) +
        2.4 * y * Math.cos(1.2 * (x * x + y * y));
      return [dx, dy];
    }

    function computeChladniForce(x, y) {
      const w = wave(x, y);
      const [gx, gy] = gradWave(x, y);
      return [-w * gx, -w * gy];
    }

    let pointer = null;
    const repulsionRadius = 4.0;
    const repulsionStrength = 3.5;

    function updatePointer(clientX, clientY) {
      const rect = renderer.domElement.getBoundingClientRect();
      const mouse = new THREE.Vector2(
        ((clientX - rect.left) / rect.width) * 2 - 1,
        -((clientY - rect.top) / rect.height) * 2 + 1
      );
      const raycaster = new THREE.Raycaster();
      raycaster.setFromCamera(mouse, camera);
      const planeZ = new THREE.Plane(new THREE.Vector3(0, 0, 1), 0);
      const intersection = new THREE.Vector3();
      raycaster.ray.intersectPlane(planeZ, intersection);
      pointer = { x: intersection.x, y: intersection.y };
    }

    renderer.domElement.addEventListener('mousemove', (e) => updatePointer(e.clientX, e.clientY));
    renderer.domElement.addEventListener('mouseleave', () => (pointer = null));
    renderer.domElement.addEventListener(
      'touchmove',
      (e) => {
        if (e.touches.length > 0) updatePointer(e.touches[0].clientX, e.touches[0].clientY);
      },
      { passive: true }
    );
    renderer.domElement.addEventListener('touchend', () => (pointer = null));

    function computeRepulsion(x, y) {
      if (!pointer) return [0, 0];
      const dx = x - pointer.x;
      const dy = y - pointer.y;
      const dist = Math.sqrt(dx * dx + dy * dy);
      if (dist < repulsionRadius && dist > 0) {
        const factor = ((repulsionRadius - dist) / repulsionRadius) * repulsionStrength;
        return [(dx / dist) * factor, (dy / dist) * factor];
      }
      return [0, 0];
    }

    const springStrength = 0.1;

    function animate() {
      requestAnimationFrame(animate);

      const currentAspect = container.clientWidth / container.clientHeight;
      const rangeX = initRangeY * currentAspect;
      const rangeY = initRangeY;

      const arr = posAttr.array;
      const opa = opacityAttr.array;

      for (let i = 0; i < particleCount; i++) {
        const idx = i * 3;
        let x = arr[idx];
        let y = arr[idx + 1];
        let vx = velocities[idx];
        let vy = velocities[idx + 1];

        const [fxC, fyC] = computeChladniForce(x, y);
        vx += fxC * forceFactor * dt;
        vy += fyC * forceFactor * dt;

        const [fxR, fyR] = computeRepulsion(x, y);
        vx += fxR * dt;
        vy += fyR * dt;

        if (x < -rangeX) vx += (-rangeX - x) * springStrength;
        if (x > rangeX) vx += (rangeX - x) * springStrength;
        if (y < -rangeY) vy += (-rangeY - y) * springStrength;
        if (y > rangeY) vy += (rangeY - y) * springStrength;

        vx *= frictionVal;
        vy *= frictionVal;
        x += vx * dt;
        y += vy * dt;

        arr[idx] = x;
        arr[idx + 1] = y;
        velocities[idx] = vx;
        velocities[idx + 1] = vy;

        opa[i] = 0.5 + 0.5 * Math.sin(performance.now() * 0.001 + i * 0.1);
      }

      let lineCount = 0;
      const maxDistSq = 0.1 * 0.1;

      for (let i = 0; i < particleCount; i++) {
        const idxA = i * 3;
        const ax = arr[idxA],
          ay = arr[idxA + 1];

        for (let j = i + 1; j < particleCount && lineCount < maxConnections; j++) {
          const idxB = j * 3;
          const bx = arr[idxB],
            by = arr[idxB + 1];
          const dx = ax - bx,
            dy = ay - by;
          const distSq = dx * dx + dy * dy;

          if (distSq < maxDistSq) {
            const li = lineCount * 6;
            linePositions[li] = ax;
            linePositions[li + 1] = ay;
            linePositions[li + 2] = 0;
            linePositions[li + 3] = bx;
            linePositions[li + 4] = by;
            linePositions[li + 5] = 0;
            lineCount++;
          }
        }
      }

      lineGeometry.setDrawRange(0, lineCount * 2);
      lineGeometry.attributes.position.needsUpdate = true;
      posAttr.needsUpdate = true;
      opacityAttr.needsUpdate = true;
      renderer.render(scene, camera);
    }

    animate();
  }
</script>
